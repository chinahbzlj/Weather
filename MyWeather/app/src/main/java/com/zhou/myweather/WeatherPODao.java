package com.zhou.myweather;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhou.myweather.db.dto.WeatherPO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER_PO".
*/
public class WeatherPODao extends AbstractDao<WeatherPO, Void> {

    public static final String TABLENAME = "WEATHER_PO";

    /**
     * Properties of entity WeatherPO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property City_name = new Property(0, String.class, "city_name", false, "CITY_NAME");
        public final static Property City_weather = new Property(1, String.class, "city_weather", false, "CITY_WEATHER");
        public final static Property City_weather_temperature = new Property(2, String.class, "city_weather_temperature", false, "CITY_WEATHER_TEMPERATURE");
        public final static Property Week = new Property(3, String.class, "week", false, "WEEK");
        public final static Property HighestTemperatures = new Property(4, String.class, "highestTemperatures", false, "HIGHEST_TEMPERATURES");
        public final static Property LowestTemperature = new Property(5, String.class, "lowestTemperature", false, "LOWEST_TEMPERATURE");
        public final static Property City_weather_info = new Property(6, String.class, "city_weather_info", false, "CITY_WEATHER_INFO");
        public final static Property City_sunup = new Property(7, String.class, "city_sunup", false, "CITY_SUNUP");
        public final static Property City_sunset = new Property(8, String.class, "city_sunset", false, "CITY_SUNSET");
        public final static Property Temperature = new Property(9, String.class, "temperature", false, "TEMPERATURE");
        public final static Property Humidity = new Property(10, String.class, "humidity", false, "HUMIDITY");
        public final static Property Wind_power = new Property(11, String.class, "wind_power", false, "WIND_POWER");
        public final static Property Wind_direction = new Property(12, String.class, "wind_direction", false, "WIND_DIRECTION");
        public final static Property Aqi = new Property(13, String.class, "aqi", false, "AQI");
        public final static Property Primary_pollutant = new Property(14, String.class, "primary_pollutant", false, "PRIMARY_POLLUTANT");
        public final static Property Quality = new Property(15, String.class, "quality", false, "QUALITY");
        public final static Property Pm2_5 = new Property(16, String.class, "pm2_5", false, "PM2_5");
        public final static Property Time = new Property(17, String.class, "time", false, "TIME");
        public final static Property LocalTime = new Property(18, String.class, "localTime", false, "LOCAL_TIME");
    }


    public WeatherPODao(DaoConfig config) {
        super(config);
    }
    
    public WeatherPODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER_PO\" (" + //
                "\"CITY_NAME\" TEXT," + // 0: city_name
                "\"CITY_WEATHER\" TEXT," + // 1: city_weather
                "\"CITY_WEATHER_TEMPERATURE\" TEXT," + // 2: city_weather_temperature
                "\"WEEK\" TEXT," + // 3: week
                "\"HIGHEST_TEMPERATURES\" TEXT," + // 4: highestTemperatures
                "\"LOWEST_TEMPERATURE\" TEXT," + // 5: lowestTemperature
                "\"CITY_WEATHER_INFO\" TEXT," + // 6: city_weather_info
                "\"CITY_SUNUP\" TEXT," + // 7: city_sunup
                "\"CITY_SUNSET\" TEXT," + // 8: city_sunset
                "\"TEMPERATURE\" TEXT," + // 9: temperature
                "\"HUMIDITY\" TEXT," + // 10: humidity
                "\"WIND_POWER\" TEXT," + // 11: wind_power
                "\"WIND_DIRECTION\" TEXT," + // 12: wind_direction
                "\"AQI\" TEXT," + // 13: aqi
                "\"PRIMARY_POLLUTANT\" TEXT," + // 14: primary_pollutant
                "\"QUALITY\" TEXT," + // 15: quality
                "\"PM2_5\" TEXT," + // 16: pm2_5
                "\"TIME\" TEXT," + // 17: time
                "\"LOCAL_TIME\" TEXT);"); // 18: localTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER_PO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeatherPO entity) {
        stmt.clearBindings();
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(1, city_name);
        }
 
        String city_weather = entity.getCity_weather();
        if (city_weather != null) {
            stmt.bindString(2, city_weather);
        }
 
        String city_weather_temperature = entity.getCity_weather_temperature();
        if (city_weather_temperature != null) {
            stmt.bindString(3, city_weather_temperature);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(4, week);
        }
 
        String highestTemperatures = entity.getHighestTemperatures();
        if (highestTemperatures != null) {
            stmt.bindString(5, highestTemperatures);
        }
 
        String lowestTemperature = entity.getLowestTemperature();
        if (lowestTemperature != null) {
            stmt.bindString(6, lowestTemperature);
        }
 
        String city_weather_info = entity.getCity_weather_info();
        if (city_weather_info != null) {
            stmt.bindString(7, city_weather_info);
        }
 
        String city_sunup = entity.getCity_sunup();
        if (city_sunup != null) {
            stmt.bindString(8, city_sunup);
        }
 
        String city_sunset = entity.getCity_sunset();
        if (city_sunset != null) {
            stmt.bindString(9, city_sunset);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(10, temperature);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(11, humidity);
        }
 
        String wind_power = entity.getWind_power();
        if (wind_power != null) {
            stmt.bindString(12, wind_power);
        }
 
        String wind_direction = entity.getWind_direction();
        if (wind_direction != null) {
            stmt.bindString(13, wind_direction);
        }
 
        String aqi = entity.getAqi();
        if (aqi != null) {
            stmt.bindString(14, aqi);
        }
 
        String primary_pollutant = entity.getPrimary_pollutant();
        if (primary_pollutant != null) {
            stmt.bindString(15, primary_pollutant);
        }
 
        String quality = entity.getQuality();
        if (quality != null) {
            stmt.bindString(16, quality);
        }
 
        String pm2_5 = entity.getPm2_5();
        if (pm2_5 != null) {
            stmt.bindString(17, pm2_5);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(18, time);
        }
 
        String localTime = entity.getLocalTime();
        if (localTime != null) {
            stmt.bindString(19, localTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeatherPO entity) {
        stmt.clearBindings();
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(1, city_name);
        }
 
        String city_weather = entity.getCity_weather();
        if (city_weather != null) {
            stmt.bindString(2, city_weather);
        }
 
        String city_weather_temperature = entity.getCity_weather_temperature();
        if (city_weather_temperature != null) {
            stmt.bindString(3, city_weather_temperature);
        }
 
        String week = entity.getWeek();
        if (week != null) {
            stmt.bindString(4, week);
        }
 
        String highestTemperatures = entity.getHighestTemperatures();
        if (highestTemperatures != null) {
            stmt.bindString(5, highestTemperatures);
        }
 
        String lowestTemperature = entity.getLowestTemperature();
        if (lowestTemperature != null) {
            stmt.bindString(6, lowestTemperature);
        }
 
        String city_weather_info = entity.getCity_weather_info();
        if (city_weather_info != null) {
            stmt.bindString(7, city_weather_info);
        }
 
        String city_sunup = entity.getCity_sunup();
        if (city_sunup != null) {
            stmt.bindString(8, city_sunup);
        }
 
        String city_sunset = entity.getCity_sunset();
        if (city_sunset != null) {
            stmt.bindString(9, city_sunset);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(10, temperature);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(11, humidity);
        }
 
        String wind_power = entity.getWind_power();
        if (wind_power != null) {
            stmt.bindString(12, wind_power);
        }
 
        String wind_direction = entity.getWind_direction();
        if (wind_direction != null) {
            stmt.bindString(13, wind_direction);
        }
 
        String aqi = entity.getAqi();
        if (aqi != null) {
            stmt.bindString(14, aqi);
        }
 
        String primary_pollutant = entity.getPrimary_pollutant();
        if (primary_pollutant != null) {
            stmt.bindString(15, primary_pollutant);
        }
 
        String quality = entity.getQuality();
        if (quality != null) {
            stmt.bindString(16, quality);
        }
 
        String pm2_5 = entity.getPm2_5();
        if (pm2_5 != null) {
            stmt.bindString(17, pm2_5);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(18, time);
        }
 
        String localTime = entity.getLocalTime();
        if (localTime != null) {
            stmt.bindString(19, localTime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public WeatherPO readEntity(Cursor cursor, int offset) {
        WeatherPO entity = new WeatherPO( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // city_name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city_weather
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city_weather_temperature
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // week
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // highestTemperatures
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lowestTemperature
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city_weather_info
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city_sunup
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // city_sunset
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // temperature
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // humidity
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // wind_power
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // wind_direction
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // aqi
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // primary_pollutant
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // quality
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // pm2_5
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // time
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // localTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeatherPO entity, int offset) {
        entity.setCity_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCity_weather(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity_weather_temperature(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWeek(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHighestTemperatures(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLowestTemperature(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCity_weather_info(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity_sunup(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCity_sunset(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTemperature(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHumidity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWind_power(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWind_direction(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAqi(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPrimary_pollutant(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setQuality(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPm2_5(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLocalTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(WeatherPO entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(WeatherPO entity) {
        return null;
    }

    @Override
    public boolean hasKey(WeatherPO entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
